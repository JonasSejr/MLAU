import unittest
import numpy as np

from hmm import logspace_viterbi_backtrack
from hmmlearner import convert_to_states


class HMMTestClass(unittest.TestCase):
    def test_viterbi_small(self):
        obsAsString = "GTTTCCCAGTGTATATCGAGGGATACTACGTGCATAGTAACATCGGCCAA"
        expectedVitAsString = "44444444444432132132132132132132132132132132132132"
        obs = list(obsAsString)
        expectedLogProb = -70.73228857440488
        prob, hidden = logspace_viterbi_backtrack(obs)
        self.assertEqual(expectedLogProb, prob, 0.001)
        self.assertEqual(expectedVitAsString, hidden)

    def test_viterbi_huge(self):
        obsAsString = "TGAGTATCACTTAGGTCTATGTCTAGTCGTCTTTCGTAATGTTTGGTCTTGTCACCAGTTATCCTATGGCGCTCCGAGTCTGGTTCTCGAAATAAGCATCCCCGCCCAAGTCATGCACCCGTTTGTGTTCTTCGCCGACTTGAGCGACTTAATGAGGATGCCACTCGTCACCATCTTGAACATGCCACCAACGAGGTTGCCGCCGTCCATTATAACTACAACCTAGACAATTTTCGCTTTAGGTCCATTCACTAGGCCGAAATCCGCTGGAGTAAGCACAAAGCTCGTATAGGCAAAACCGACTCCATGAGTCTGCCTCCCGACCATTCCCATCAAAATACGCTATCAATACTAAAAAAATGACGGTTCAGCCTCACCCGGATGCTCGAGACAGCACACGGACATGATAGCGAACGTGACCAGTGTAGTGGCCCAGGGGAACCGCCGCGCCATTTTGTTCATGGCCCCGCTGCCGAATATTTCGATCCCAGCTAGAGTAATGACCTGTAGCTTAAACCCACTTTTGGCCCAAACTAGAGCAACAATCGGAATGGCTGAAGTGAATGCCGGCATGCCCTCAGCTCTAAGCGCCTCGATCGCAGTAATGACCGTCTTAACATTAGCTCTCAACGCTATGCAGTGGCTTTGGTGTCGCTTACTACCAGTTCCGAACGTCTCGGGGGTCTTGATGCAGCGCACCACGATGCCAAGCCACGCTGAATCGGGCAGCCAGCAGGATCGTTACAGTCGAGCCCACGGCAATGCGAGCCGTCACGTTGCCGAATATGCACTGCGGGACTACGGACGCAGGGCCGCCAACCATCTGGTTGACGATAGCCAAACACGGTCCAGAGGTGCCCCATCTCGGTTATTTGGATCGTAATTTTTGTGAAGAACACTGCAAACGCAAGTGGCTTTCCAGACTTTACGACTATGTGCCATCATTTAAGGCTACGACCCGGCTTTTAAGACCCCCACCACTAAATAGAGGTACATCTGA"
        expectedVitAsString = "4444432132132132132132132132132132132132132132132132132132132132132132144444444445675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675674321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321321432132132132132132132132144445675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675675674444444567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567567443213213213213213213213213213213213213213213213213213213213213213213213213213213213213213213213214321321321321321321321321321321321321321321321321321321321321321"
        obs = list(obsAsString)
        expectedLogProb = -1406.7209253880144
        prob, hidden = logspace_viterbi_backtrack(obs)
        self.assertEqual(expectedLogProb, prob, 0.001)
        self.assertEqual(expectedVitAsString, hidden)

    def test_convert_to_states_simple(self):
        annotation = ["N", "C", "C", "C", "N"]
        expected_states = ["S1", "S2","S3","S4","S1"]
        self.assertEqual(expected_states, convert_to_states(annotation))


    def test_convert_to_states_simple_reverse(self):
        annotation = ["N", "R", "R", "R", "N"]
        expected_states = ["S1", "S5", "S6", "S7", "S1"]
        self.assertEqual(expected_states, convert_to_states(annotation))


    def test_convert_to_states_bulk(self):
        annotation = ["N", "C", "C", "C", "N", "R", "R", "R", "N"]
        expected_states = ["S1", "S2", "S3", "S4", "S1", "S5", "S6", "S7", "S1"]
        self.assertEqual(expected_states, convert_to_states(annotation))
